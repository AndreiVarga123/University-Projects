        -:    0:Source:C:/Users/varga/Downloads/SortedList/ShortTest.cpp
        -:    0:Graph:C:\Users\varga\Downloads\SortedList\cmake-build-debug-coverage\CMakeFiles\SortedList.dir\ShortTest.cpp.gcno
        -:    0:Data:C:\Users\varga\Downloads\SortedList\cmake-build-debug-coverage\CMakeFiles\SortedList.dir\ShortTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include <stdio.h>
        -:    3:
        -:    4:#include "SortedIteratedList.h"
        -:    5:#include "ListIterator.h"
        -:    6:
        -:    7:#include <exception>
        -:    8:using namespace std;
        -:    9:
function _Z9relation1ii called 0 returned 0% blocks executed 0%
    #####:   10:bool relation1(TComp e1, TComp e2) {
    #####:   11:	if (e1 <= e2) {
    %%%%%:   11-block  0
branch  0 never executed
branch  1 never executed
    #####:   12:		return true;
    %%%%%:   12-block  0
        -:   13:	}
        -:   14:	else {
    #####:   15:		return false;
    %%%%%:   15-block  0
        -:   16:	}
        -:   17:}
        -:   18:
function _Z7testAllv called 1 returned 100% blocks executed 63%
        1:   19:void testAll(){
        1:   20:	SortedIteratedList list = SortedIteratedList(relation1);
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   21:	assert(list.size() == 0);
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   21-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   21-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   21-block  3
    %%%%%:   21-block  4
       1*:   22:	assert(list.isEmpty());
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   22-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   22-block  3
    %%%%%:   22-block  4
        1:   23:    list.add(1);
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   24:    assert(list.size() == 1);
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   24-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   24-block  3
    %%%%%:   24-block  4
       1*:   25:    assert(!list.isEmpty());
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   25-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   25-block  3
    %%%%%:   25-block  4
        1:   26:    ListIterator it = list.search(1);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   27:    assert(it.valid());
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   27-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   27-block  3
    %%%%%:   27-block  4
       1*:   28:    assert(it.getCurrent() == 1);
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   28-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   28-block  3
    %%%%%:   28-block  4
        1:   29:    it.next();
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   30:    assert(!it.valid());
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   30-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   30-block  3
    %%%%%:   30-block  4
        1:   31:    it.first();
        1:   31-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   32:    assert(it.valid());
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   32-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   32-block  3
    %%%%%:   32-block  4
        1:   33:    ListIterator itFirst = list.first();
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   34:    assert(itFirst.valid());
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   34-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   34-block  3
    %%%%%:   34-block  4
       1*:   35:    assert(itFirst.getCurrent() == 1);
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   35-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   35-block  3
    %%%%%:   35-block  4
       1*:   36:    assert(list.remove(it) == 1);
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   36-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   36-block  3
    %%%%%:   36-block  4
       1*:   37:    assert(list.size() == 0);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   37-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   37-block  3
    %%%%%:   37-block  4
       1*:   38:    assert(list.isEmpty());
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   38-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   38-block  3
    %%%%%:   38-block  4
        1:   39:}
        1:   39-block  0
call    0 returned 1
    $$$$$:   39-block  1
call    1 never executed
        -:   40:
