        -:    0:Source:C:/Users/varga/Downloads/SortedList/ExtendedTest.cpp
        -:    0:Graph:C:\Users\varga\Downloads\SortedList\cmake-build-debug-coverage\CMakeFiles\SortedList.dir\ExtendedTest.cpp.gcno
        -:    0:Data:C:\Users\varga\Downloads\SortedList\cmake-build-debug-coverage\CMakeFiles\SortedList.dir\ExtendedTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "ExtendedTest.h"
        -:    2:#include <assert.h>
        -:    3:#include <cstdlib>
        -:    4:#include <vector>
        -:    5:#include <iostream>
        -:    6:#include "ListIterator.h"
        -:    7:#include "SortedIteratedList.h"
        -:    8:
        -:    9:using namespace std;
        -:   10:
        -:   11:
        -:   12://relation order - ascending
function _Z3ascii called 2352630 returned 100% blocks executed 100%
  2352630:   13:bool asc(TComp c1, TComp c2) {
  2352630:   14:	if (c1 <= c2) {
  2352630:   14-block  0
branch  0 taken 2344544 (fallthrough)
branch  1 taken 8086
  2344544:   15:		return true;
  2344544:   15-block  0
        -:   16:	} else {
     8086:   17:		return false;
     8086:   17-block  0
        -:   18:	}
        -:   19:}
        -:   20:
        -:   21://relation order - descending
function _Z4descii called 19888 returned 100% blocks executed 100%
    19888:   22:bool desc(TComp c1, TComp c2) {
    19888:   23:	if (c1 >= c2) {
    19888:   23-block  0
branch  0 taken 14798 (fallthrough)
branch  1 taken 5090
    14798:   24:		return true;
    14798:   24-block  0
        -:   25:	} else {
     5090:   26:		return false;
     5090:   26-block  0
        -:   27:	}
        -:   28:}
        -:   29:
function _Z17testIteratorStepsR18SortedIteratedListPFbiiE called 106 returned 100% blocks executed 82%
      106:   30:void testIteratorSteps(SortedIteratedList& sil, Relation r) {
      106:   31:	ListIterator li = sil.first();
      106:   31-block  0
call    0 returned 106
branch  1 taken 106 (fallthrough)
branch  2 taken 0 (throw)
      106:   32:	TComp elem = li.getCurrent();
      106:   32-block  0
call    0 returned 106
branch  1 taken 106 (fallthrough)
branch  2 taken 0 (throw)
      106:   33:	int count = 0;
      106:   34:	if (li.valid()) {
      106:   34-block  0
call    0 returned 106
branch  1 taken 106 (fallthrough)
branch  2 taken 0 (throw)
      106:   34-block  1
branch  3 taken 106 (fallthrough)
branch  4 taken 0
      106:   35:		count++;
      106:   36:		li.next();
      106:   36-block  0
call    0 returned 106
branch  1 taken 106 (fallthrough)
branch  2 taken 0 (throw)
        -:   37:	}
     7802:   38:	while (li.valid()) {
      106:   38-block  0
     7802:   38-block  1
call    0 returned 7802
branch  1 taken 7802 (fallthrough)
branch  2 taken 0 (throw)
     7802:   38-block  2
branch  3 taken 7696
branch  4 taken 106 (fallthrough)
     7696:   39:		TComp elem2 = li.getCurrent();
     7696:   39-block  0
call    0 returned 7696
branch  1 taken 7696 (fallthrough)
branch  2 taken 0 (throw)
    7696*:   40:		assert(r(elem, elem2));
     7696:   40-block  0
call    0 returned 7696
branch  1 taken 7696 (fallthrough)
branch  2 taken 0 (throw)
     7696:   40-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 7696
    %%%%%:   40-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
     7696:   40-block  3
    %%%%%:   40-block  4
     7696:   41:		elem = elem2;
     7696:   42:		count++;
     7696:   43:		li.next();
     7696:   43-block  0
call    0 returned 7696
branch  1 taken 7696 (fallthrough)
branch  2 taken 0 (throw)
        -:   44:	}
     106*:   45:	assert(count == sil.size());
      106:   45-block  0
call    0 returned 106
branch  1 taken 106 (fallthrough)
branch  2 taken 0 (throw)
      106:   45-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 106
    %%%%%:   45-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
      106:   45-block  3
    %%%%%:   45-block  4
      106:   46:}
      106:   46-block  0
        -:   47:
function _Z10testCreatev called 1 returned 100% blocks executed 59%
        1:   48:void testCreate() {
        1:   49:	cout << "Test create" << endl;
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   50:	SortedIteratedList list = SortedIteratedList(asc);
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   51:	assert(list.size() == 0);
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   51-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   51-block  3
    %%%%%:   51-block  4
       1*:   52:	assert(list.isEmpty());
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   52-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   52-block  3
    %%%%%:   52-block  4
        -:   53:
        1:   54:	ListIterator it = list.first();
        1:   54-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   55:	assert(!it.valid());
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   55-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   55-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:   55-block  3
    %%%%%:   55-block  4
        1:   56:	it.first();
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   57:
       11:   58:	for (int i = 0; i < 10; i++) {
        1:   58-block  0
       10:   58-block  1
       11:   58-block  2
branch  0 taken 10
branch  1 taken 1 (fallthrough)
      10*:   59:		assert(!it.valid());
       10:   59-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   59-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:   59-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
       10:   59-block  3
    %%%%%:   59-block  4
      10*:   60:		assert(!list.search(i).valid());
       10:   60-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   60-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10:   60-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 10
    %%%%%:   60-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
       10:   60-block  4
    %%%%%:   60-block  5
    $$$$$:   60-block  6
        -:   61:		try {
      10*:   62:			assert(list.getElement(it));
       10:   62-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10 (throw)
    %%%%%:   62-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   62-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   62-block  3
    %%%%%:   62-block  4
    #####:   63:			assert(false);
    %%%%%:   63-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       10:   64:		} catch (exception&) {
       10:   64-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
       10:   64-block  1
call    2 returned 10
        -:   65:			assert(true);
       10:   66:		}
call    0 returned 10
        -:   67:		try {
      10*:   68:			assert(list.remove(it));
       10:   68-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10 (throw)
    %%%%%:   68-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   68-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   68-block  3
    %%%%%:   68-block  4
    #####:   69:			assert(false);
    %%%%%:   69-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       10:   70:		} catch (exception&) {
       10:   70-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
       10:   70-block  1
call    2 returned 10
        -:   71:			assert(true);
       10:   72:		}
call    0 returned 10
        -:   73:		try {
       10:   74:			it.next();
       10:   74-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10 (throw)
    #####:   75:			assert(false);
    %%%%%:   75-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       10:   76:		} catch(exception& ex) {
       10:   76-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 10
       10:   76-block  1
call    2 returned 10
        -:   77:			assert(true);
       10:   78:		}
call    0 returned 10
        -:   79:	}
        1:   80:}
        1:   80-block  0
call    0 returned 1
    $$$$$:   80-block  1
call    1 never executed
        -:   81:
        -:   82://generate a vector with values between cMin and cMax so that
        -:   83://1) no value that is >=cMin and <=cMax which is a multiple of s is not included
        -:   84://2) values v, v>=cMin and v<=cMax which are a multiple of m (but not of s) are included c/m + 1 times
        -:   85://3) values >=cMin and <=cMax are in random order
function _Z6randomiiii called 2 returned 100% blocks executed 92%
        2:   86:vector<int> random(int cMin, int cMax, int s, int m) {
        2:   87:	vector<int> v;
        2:   87-block  0
call    0 returned 2
       44:   88:	for (int c = cMin; c <= cMax; c++) {
       42:   88-block  0
       44:   88-block  1
branch  0 taken 42
branch  1 taken 2 (fallthrough)
       42:   89:		if (c % s != 0) {
       42:   89-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 10
       32:   90:			v.push_back(c);
       32:   90-block  0
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0 (throw)
       32:   91:			if (c % m == 0) {
       32:   91-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 22
       78:   92:				for (int j = 0; j < c / m; j++) {
       10:   92-block  0
       68:   92-block  1
       78:   92-block  2
branch  0 taken 68
branch  1 taken 10 (fallthrough)
       68:   93:					v.push_back(c);
       68:   93-block  0
call    0 returned 68
branch  1 taken 68 (fallthrough)
branch  2 taken 0 (throw)
        -:   94:				}
        -:   95:			}
        -:   96:		}
        -:   97:	}
        2:   98:	int n = v.size();
        2:   98-block  0
call    0 returned 2
      100:   99:	for (int i = 0; i < n - 1; i++) {
      100:   99-block  0
branch  0 taken 98
branch  1 taken 2 (fallthrough)
       98:  100:		int j = i + rand() % (n - i);
       98:  100-block  0
call    0 returned 98
       98:  101:		swap(v[i], v[j]);
call    0 returned 98
call    1 returned 98
call    2 returned 98
        -:  102:	}
        2:  103:	return v;
        2:  103-block  0
        2:  103-block  1
    =====:  104:}
    $$$$$:  104-block  0
call    0 never executed
        -:  105:
        -:  106://generate a vector containing values >=cMin and <=cMax, each included one time, in random order
function _Z6randomii called 5 returned 100% blocks executed 89%
        5:  107:vector<int> random(int cMin, int cMax) {
        5:  108:	vector<int> v;
        5:  108-block  0
call    0 returned 5
     3410:  109:	for (int c = cMin; c <= cMax; c++) {
     3405:  109-block  0
     3410:  109-block  1
branch  0 taken 3405
branch  1 taken 5 (fallthrough)
     3405:  110:		v.push_back(c);
     3405:  110-block  0
call    0 returned 3405
branch  1 taken 3405 (fallthrough)
branch  2 taken 0 (throw)
        -:  111:	}
        -:  112:
        5:  113:	int n = v.size();
        5:  113-block  0
call    0 returned 5
     3405:  114:	for (int i = 0; i < n - 1; i++) {
     3405:  114-block  0
branch  0 taken 3400
branch  1 taken 5 (fallthrough)
     3400:  115:		int j = i + rand() % (n - i);
     3400:  115-block  0
call    0 returned 3400
     3400:  116:		swap(v[i], v[j]);
call    0 returned 3400
call    1 returned 3400
call    2 returned 3400
        -:  117:	}
        5:  118:	return v;
        5:  118-block  0
        5:  118-block  1
    =====:  119:}
    $$$$$:  119-block  0
call    0 never executed
        -:  120:
        -:  121://populate the sorted list with values >=cMin and <=cMax a.i.:
        -:  122://1) no value that is >=cMin and <=cMax which is a multiple of s is not included
        -:  123://2) values v, v>=cMin and v<=cMax which are a multiple of m (but not of s) are included c/m + 1 times
        -:  124://3) values >=cMin and <=cMax are in random order
function _Z8populateR18SortedIteratedListiiii called 2 returned 100% blocks executed 85%
        2:  125:int populate(SortedIteratedList& list, int cMin, int cMax, int s, int m) {
        2:  126:	vector<int> v = random(cMin, cMax, s, m);
        2:  126-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  127:	int n = v.size();
        2:  127-block  0
call    0 returned 2
      102:  128:	for (int i = 0; i < n; i++) {
      100:  128-block  0
      102:  128-block  1
branch  0 taken 100
branch  1 taken 2 (fallthrough)
      100:  129:		list.add(v[i]);
      100:  129-block  0
call    0 returned 100
call    1 returned 100
branch  2 taken 100 (fallthrough)
branch  3 taken 0 (throw)
        -:  130:	}
        2:  131:	return n;
        2:  131-block  0
        2:  132:}
        2:  132-block  0
call    0 returned 2
    $$$$$:  132-block  1
call    1 never executed
        -:  133:
        -:  134://populate the sorted list with values >=cMin and <=cMax, each included one time, in random order
function _Z8populateR18SortedIteratedListii called 2 returned 100% blocks executed 83%
        2:  135:void populate(SortedIteratedList& list, int cMin, int cMax) {
        2:  136:	vector<int> v = random(cMin, cMax);
        2:  136-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  137:	int n = v.size();
        2:  137-block  0
call    0 returned 2
      204:  138:	for (int i = 0; i < n; i++) {
      202:  138-block  0
      204:  138-block  1
branch  0 taken 202
branch  1 taken 2 (fallthrough)
      202:  139:		list.add(v[i]);
      202:  139-block  0
call    0 returned 202
call    1 returned 202
branch  2 taken 202 (fallthrough)
branch  3 taken 0 (throw)
        -:  140:	}
        2:  141:}
        2:  141-block  0
call    0 returned 2
    $$$$$:  141-block  1
call    1 never executed
        -:  142:
function _Z16testAddAndSearchPFbiiE called 2 returned 100% blocks executed 67%
        2:  143:void testAddAndSearch(Relation r) {
        2:  144:	cout << "Test add and search" << endl;
        2:  144-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  144-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  145:	SortedIteratedList list = SortedIteratedList(r);
        2:  145-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  146:	int vMin = 10;
        2:  147:	int vMax = 30;
        2:  148:	int s = 5;
        2:  149:	int m = 3;
        2:  150:	int n = populate(list, vMin, vMax, s, m);
        2:  150-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  151:	assert(!list.isEmpty());
        2:  151-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  151-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  151-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  151-block  3
    %%%%%:  151-block  4
        2:  152:	testIteratorSteps(list, r);
        2:  152-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  153:	assert(list.size() == n);
        2:  153-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  153-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  153-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  153-block  3
    %%%%%:  153-block  4
        -:  154:
        -:  155:	//we can't find values outside the interval or on invalid positions
        2:  156:	int d = 30;
       62:  157:	for (int i = 1; i <= d; i++) {
        2:  157-block  0
       62:  157-block  1
branch  0 taken 60
branch  1 taken 2 (fallthrough)
      60*:  158:		assert(!list.search(vMin - i).valid());
       60:  158-block  0
call    0 returned 60
branch  1 taken 60 (fallthrough)
branch  2 taken 0 (throw)
       60:  158-block  1
call    3 returned 60
branch  4 taken 60 (fallthrough)
branch  5 taken 0 (throw)
       60:  158-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 60
    %%%%%:  158-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
       60:  158-block  4
    %%%%%:  158-block  5
    $$$$$:  158-block  6
      60*:  159:		assert(!list.search(vMax + i).valid());
       60:  159-block  0
call    0 returned 60
branch  1 taken 60 (fallthrough)
branch  2 taken 0 (throw)
       60:  159-block  1
call    3 returned 60
branch  4 taken 60 (fallthrough)
branch  5 taken 0 (throw)
       60:  159-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 60
    %%%%%:  159-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
       60:  159-block  4
    %%%%%:  159-block  5
       60:  159-block  6
    $$$$$:  159-block  7
        -:  160:	}
        -:  161:
        -:  162:	//check the relation order
        2:  163:	ListIterator it = list.first();
        2:  163-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  164:	assert(it.valid());
        2:  164-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  164-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  164-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  164-block  3
    %%%%%:  164-block  4
        2:  165:	TComp prev = it.getCurrent();
        2:  165-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  166:	it.next();
        2:  166-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      100:  167:	while (it.valid()) {
        2:  167-block  0
      100:  167-block  1
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  167-block  2
branch  3 taken 98
branch  4 taken 2 (fallthrough)
       98:  168:		TComp current = list.getElement(it);
       98:  168-block  0
call    0 returned 98
branch  1 taken 98 (fallthrough)
branch  2 taken 0 (throw)
      98*:  169:		assert(r(prev, current));
       98:  169-block  0
call    0 returned 98
branch  1 taken 98 (fallthrough)
branch  2 taken 0 (throw)
       98:  169-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 98
    %%%%%:  169-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
       98:  169-block  3
    %%%%%:  169-block  4
       98:  170:		prev = current;
       98:  171:		it.next();
       98:  171-block  0
call    0 returned 98
branch  1 taken 98 (fallthrough)
branch  2 taken 0 (throw)
        -:  172:	}
        -:  173:	//check if added values can be found
       44:  174:		for (int v = vMin; v <= vMax; v++) {
        2:  174-block  0
       42:  174-block  1
       44:  174-block  2
branch  0 taken 42
branch  1 taken 2 (fallthrough)
       42:  175:			testIteratorSteps(list, r);
       42:  175-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:  176:			ListIterator p = list.search(v);
       42:  176-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
        -:  177:			//we can't find values which are a multiple of s
      42*:  178:			assert(p.valid() == (v % s != 0));
       42:  178-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:  178-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 42
    %%%%%:  178-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
       42:  178-block  3
    %%%%%:  178-block  4
        -:  179:			//values which are a multiple of m can be found exactly v/m+1 times
       42:  180:			if (p.valid() && v%m == 0){
       42:  180-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42:  180-block  1
branch  3 taken 32 (fallthrough)
branch  4 taken 10
       32:  180-block  2
branch  5 taken 10 (fallthrough)
branch  6 taken 22
       10:  180-block  3
       32:  180-block  4
       42:  180-block  5
branch  7 taken 10 (fallthrough)
branch  8 taken 32
       88:  181:            	for (int i=0; i<=v/m; i++){
       10:  181-block  0
       78:  181-block  1
       88:  181-block  2
branch  0 taken 78
branch  1 taken 10 (fallthrough)
        -:  182:            		try{
      78*:  183:            			assert(list.remove(p) == v);
       78:  183-block  0
call    0 returned 78
branch  1 taken 78 (fallthrough)
branch  2 taken 0 (throw)
       78:  183-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 78
    %%%%%:  183-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
       78:  183-block  3
    %%%%%:  183-block  4
    =====:  184:            		} catch (exception&) {
    $$$$$:  184-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  184-block  1
call    2 never executed
    =====:  185:						assert(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  186:					}
    $$$$$:  186-block  0
call    0 never executed
    $$$$$:  186-block  1
call    1 never executed
        -:  187:            	}
      10*:  188:            	assert(!list.search(v).valid());
       10:  188-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  188-block  1
call    3 returned 10
branch  4 taken 10 (fallthrough)
branch  5 taken 0 (throw)
       10:  188-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 10
    %%%%%:  188-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
       10:  188-block  4
    %%%%%:  188-block  5
       10:  188-block  6
    $$$$$:  188-block  7
        -:  189:            }
        -:  190:		}
        -:  191:
        -:  192:
        2:  193:}
        2:  193-block  0
call    0 returned 2
    $$$$$:  193-block  1
call    1 never executed
        -:  194:
function _Z16testDeleteSearchPFbiiE called 2 returned 100% blocks executed 65%
        2:  195:void testDeleteSearch(Relation r) {
        2:  196:	cout << "Test delete and search" << endl;
        2:  196-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  196-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  197:	SortedIteratedList list = SortedIteratedList(r);
        2:  197-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  198:	int vMin = 0;
        2:  199:	int vMax = 100;
        2:  200:	populate(list, vMin, vMax);
        2:  200-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  201:	testIteratorSteps(list, r);
        2:  201-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  202:	int d = 30;
       62:  203:	for (int i = 1; i <= d; i++) {
        2:  203-block  0
       60:  203-block  1
       62:  203-block  2
branch  0 taken 60
branch  1 taken 2 (fallthrough)
        -:  204:		try {
       60:  205:			ListIterator li = list.search(vMax + 1);
       60:  205-block  0
call    0 returned 60
branch  1 taken 60 (fallthrough)
branch  2 taken 0 (throw)
       60:  206:			list.remove(li);
       60:  206-block  0
call    0 returned 60
branch  1 taken 0 (fallthrough)
branch  2 taken 60 (throw)
    #####:  207:			assert(false);
    %%%%%:  207-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       60:  208:		} catch (exception&) {
       60:  208-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 60
       60:  208-block  1
call    2 returned 60
        -:  209:			assert(true);
       60:  210:		}
call    0 returned 60
       60:  211:		testIteratorSteps(list, r);
       60:  211-block  0
call    0 returned 60
branch  1 taken 60 (fallthrough)
branch  2 taken 0 (throw)
        -:  212:	}
        -:  213:
       2*:  214:	assert(!list.isEmpty());
        2:  214-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  214-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  214-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  214-block  3
    %%%%%:  214-block  4
       2*:  215:	assert(list.size() == vMax - vMin + 1);
        2:  215-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  215-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  215-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  215-block  3
    %%%%%:  215-block  4
        2:  216:	ListIterator it1 = list.first();
        2:  216-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  217:	assert(it1.valid());
        2:  217-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  217-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  217-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  217-block  3
    %%%%%:  217-block  4
        2:  218:	TComp deleted = NULL_TCOMP;
        -:  219:	try {
        2:  220:		deleted = list.remove(it1);
        2:  220-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  221:		assert(list.size() == vMax - vMin);
        2:  221-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  221-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  221-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  221-block  3
    %%%%%:  221-block  4
        2:  222:		TComp newFirst = it1.getCurrent();
        2:  222-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  223:		assert(newFirst != deleted);
        2:  223-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    %%%%%:  223-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        2:  223-block  2
    %%%%%:  223-block  3
       2*:  224:		assert(r(deleted, newFirst));
        2:  224-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  224-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  224-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  224-block  3
    %%%%%:  224-block  4
        2:  225:		it1.first();
        2:  225-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  226:		ListIterator it2 = list.first();
        2:  226-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  227:		assert(it1.getCurrent() == newFirst && it2.getCurrent() == newFirst);
        2:  227-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  227-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2:  227-block  2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:  227-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 2
    %%%%%:  227-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
        2:  227-block  5
    %%%%%:  227-block  6
    =====:  228:	} catch (exception&) {
    $$$$$:  228-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  228-block  1
call    2 never executed
    =====:  229:		assert(false);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  230:	}
    $$$$$:  230-block  0
call    0 never executed
    $$$$$:  230-block  1
call    1 never executed
        -:  231:
        -:  232:	//delete values in random order while checking the relation order
        2:  233:	vector<int> vs = random(vMin, vMax);
        2:  233-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  234:	int n = vs.size();
        2:  234-block  0
call    0 returned 2
      204:  235:	for (int i = 0; i < n; i++) {
      202:  235-block  0
      204:  235-block  1
branch  0 taken 202
branch  1 taken 2 (fallthrough)
      202:  236:		int v = vs[i];
      202:  236-block  0
call    0 returned 202
        -:  237:		try {
      202:  238:			ListIterator it1  = list.search(v);
call    0 returned 202
branch  1 taken 202 (fallthrough)
branch  2 taken 0 (throw)
      202:  239:			TComp deleteCurrent = list.remove(it1);
      202:  239-block  0
call    0 returned 202
branch  1 taken 200 (fallthrough)
branch  2 taken 2 (throw)
     200*:  240:			assert(deleteCurrent != deleted);
      200:  240-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 200
    %%%%%:  240-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
      200:  240-block  2
    %%%%%:  240-block  3
     200*:  241:			assert(deleteCurrent == v);
      200:  241-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 200
    %%%%%:  241-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
      200:  241-block  2
    %%%%%:  241-block  3
     200*:  242:			assert(!list.search(v).valid());
      200:  242-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  242-block  1
call    3 returned 200
branch  4 taken 200 (fallthrough)
branch  5 taken 0 (throw)
      200:  242-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 200
    %%%%%:  242-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
      200:  242-block  4
    %%%%%:  242-block  5
    $$$$$:  242-block  6
        -:  243:
      200:  244:			if (!list.isEmpty()) {
      200:  244-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  244-block  1
branch  3 taken 198 (fallthrough)
branch  4 taken 2
     198*:  245:				assert(list.first().valid());
      198:  245-block  0
call    0 returned 198
branch  1 taken 198 (fallthrough)
branch  2 taken 0 (throw)
      198:  245-block  1
call    3 returned 198
branch  4 taken 198 (fallthrough)
branch  5 taken 0 (throw)
      198:  245-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 198
    %%%%%:  245-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
      198:  245-block  4
    %%%%%:  245-block  5
    $$$$$:  245-block  6
      198:  246:				ListIterator it2 = list.first();
      198:  246-block  0
call    0 returned 198
branch  1 taken 198 (fallthrough)
branch  2 taken 0 (throw)
     198*:  247:				assert(it2.valid());
      198:  247-block  0
call    0 returned 198
branch  1 taken 198 (fallthrough)
branch  2 taken 0 (throw)
      198:  247-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 198
    %%%%%:  247-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
      198:  247-block  3
    %%%%%:  247-block  4
      198:  248:				TComp prev = it2.getCurrent();
      198:  248-block  0
call    0 returned 198
branch  1 taken 198 (fallthrough)
branch  2 taken 0 (throw)
    10098:  249:				while (it2.valid()) {
      198:  249-block  0
    10098:  249-block  1
call    0 returned 10098
branch  1 taken 10098 (fallthrough)
branch  2 taken 0 (throw)
    10098:  249-block  2
branch  3 taken 9900
branch  4 taken 198 (fallthrough)
     9900:  250:					TComp current = list.getElement(it2);
     9900:  250-block  0
call    0 returned 9900
branch  1 taken 9900 (fallthrough)
branch  2 taken 0 (throw)
    9900*:  251:					assert(r(prev, current));
     9900:  251-block  0
call    0 returned 9900
branch  1 taken 9900 (fallthrough)
branch  2 taken 0 (throw)
     9900:  251-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 9900
    %%%%%:  251-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
     9900:  251-block  3
    %%%%%:  251-block  4
    9900*:  252:					assert(!r(deleteCurrent, current) || !r(current, deleteCurrent));
     9900:  252-block  0
call    0 returned 9900
branch  1 taken 9900 (fallthrough)
branch  2 taken 0 (throw)
     9900:  252-block  1
branch  3 taken 5355 (fallthrough)
branch  4 taken 4545
     5355:  252-block  2
call    5 returned 5355
branch  6 taken 5355 (fallthrough)
branch  7 taken 0 (throw)
     5355:  252-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 5355
    %%%%%:  252-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
     9900:  252-block  5
    %%%%%:  252-block  6
     9900:  253:					prev = current;
     9900:  254:					it2.next();
     9900:  254-block  0
call    0 returned 9900
branch  1 taken 9900 (fallthrough)
branch  2 taken 0 (throw)
        -:  255:				}
        -:  256:			}
        -:  257:
        2:  258:		} catch (exception&) {
        2:  258-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        2:  258-block  1
call    2 returned 2
        2:  259:			assert(v == deleted);
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    $$$$$:  259-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
        2:  259-block  1
    $$$$$:  259-block  2
        2:  260:		}
        2:  260-block  0
call    0 returned 2
    $$$$$:  260-block  1
call    1 never executed
        -:  261:	}
        -:  262:
       2*:  263:	assert(list.isEmpty());
        2:  263-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  263-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  263-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  263-block  3
    %%%%%:  263-block  4
       2*:  264:	assert(list.size() == 0);
        2:  264-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  264-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  264-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        2:  264-block  3
    %%%%%:  264-block  4
        2:  265:}
        2:  265-block  0
call    0 returned 2
call    1 returned 2
    $$$$$:  265-block  1
call    2 never executed
    $$$$$:  265-block  2
call    3 never executed
        -:  266:
function _Z16testDeleteSearchv called 1 returned 100% blocks executed 100%
        1:  267:void testDeleteSearch() {
        1:  268:	testDeleteSearch(asc);
        1:  268-block  0
call    0 returned 1
        1:  269:	testDeleteSearch(desc);
call    0 returned 1
        1:  270:}
        -:  271:
function _Z16testAddAndSearchv called 1 returned 100% blocks executed 100%
        1:  272:void testAddAndSearch() {
        1:  273:	testAddAndSearch(asc);
        1:  273-block  0
call    0 returned 1
        1:  274:	testAddAndSearch(desc);
call    0 returned 1
        1:  275:}
        -:  276:
        -:  277:
function _Z12testQuantityv called 1 returned 100% blocks executed 70%
        1:  278:void testQuantity(){
        1:  279:	cout << "Test quantity" << endl;
        1:  279-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  279-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  280:	SortedIteratedList list = SortedIteratedList(asc);
        1:  280-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  281:
        1:  282:	int vMin = 3000;
        1:  283:	int vMax = 6000;
        1:  284:	vector<int> values  = random(vMin, vMax);
        1:  284-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  285:	int n = values.size();
        1:  285-block  0
call    0 returned 1
     3002:  286:    for (int i = 0; i < n; i++){
     3001:  286-block  0
     3002:  286-block  1
branch  0 taken 3001
branch  1 taken 1 (fallthrough)
     3001:  287:    	list.add(values[i]);
     3001:  287-block  0
call    0 returned 3001
call    1 returned 3001
branch  2 taken 3001 (fallthrough)
branch  3 taken 0 (throw)
        -:  288:    }
        -:  289:
       1*:  290:    assert(list.size() == vMax - vMin + 1);
        1:  290-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  290-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  290-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  290-block  3
    %%%%%:  290-block  4
     3002:  291:    for (int v = vMin; v <= vMax; v++){
        1:  291-block  0
     3002:  291-block  1
branch  0 taken 3001
branch  1 taken 1 (fallthrough)
    3001*:  292:      	assert(list.search(v).valid());
     3001:  292-block  0
call    0 returned 3001
branch  1 taken 3001 (fallthrough)
branch  2 taken 0 (throw)
     3001:  292-block  1
call    3 returned 3001
branch  4 taken 3001 (fallthrough)
branch  5 taken 0 (throw)
     3001:  292-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 3001
    %%%%%:  292-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
     3001:  292-block  4
    %%%%%:  292-block  5
    $$$$$:  292-block  6
    3001*:  293:      	assert(list.search(v).getCurrent() == v);
     3001:  293-block  0
call    0 returned 3001
branch  1 taken 3001 (fallthrough)
branch  2 taken 0 (throw)
     3001:  293-block  1
call    3 returned 3001
branch  4 taken 3001 (fallthrough)
branch  5 taken 0 (throw)
     3001:  293-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 3001
    %%%%%:  293-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
     3001:  293-block  4
    %%%%%:  293-block  5
     3001:  293-block  6
    $$$$$:  293-block  7
        -:  294:    }
        -:  295:
        1:  296:    ListIterator it  = list.first();
        1:  296-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  297:    assert(it.valid());
        1:  297-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  297-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  297-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  297-block  3
    %%%%%:  297-block  4
        1:  298:    TComp firstElem = it.getCurrent();
        1:  298-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  299:    it.first();
        1:  299-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  300:    assert(it.valid());
        1:  300-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  300-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  300-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  300-block  3
    %%%%%:  300-block  4
       1*:  301:    assert(it.getCurrent() == firstElem);
        1:  301-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  301-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  301-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  301-block  3
    %%%%%:  301-block  4
     3002:  302:    for (int i = 0; i < list.size(); i++) {
        1:  302-block  0
     3001:  302-block  1
     3002:  302-block  2
call    0 returned 3002
branch  1 taken 3002 (fallthrough)
branch  2 taken 0 (throw)
     3002:  302-block  3
branch  3 taken 3001
branch  4 taken 1 (fallthrough)
     3001:  303:    	it.next();
     3001:  303-block  0
call    0 returned 3001
branch  1 taken 3001 (fallthrough)
branch  2 taken 0 (throw)
        -:  304:    }
        -:  305:
       1*:  306:    assert(!it.valid());
        1:  306-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  306-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  306-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  306-block  3
    %%%%%:  306-block  4
        1:  307:    it.first();
        1:  307-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
     3002:  308:    while (it.valid()){
        1:  308-block  0
     3002:  308-block  1
call    0 returned 3002
branch  1 taken 3002 (fallthrough)
branch  2 taken 0 (throw)
     3002:  308-block  2
branch  3 taken 3001
branch  4 taken 1 (fallthrough)
     3001:  309:        TComp v  = it.getCurrent();
     3001:  309-block  0
call    0 returned 3001
branch  1 taken 3001 (fallthrough)
branch  2 taken 0 (throw)
    3001*:  310:        assert(vMin <= v && v<=vMax);
     3001:  310-block  0
branch  0 taken 3001 (fallthrough)
branch  1 taken 0
     3001:  310-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3001
    %%%%%:  310-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
     3001:  310-block  3
    %%%%%:  310-block  4
     3001:  311:        it.next();
     3001:  311-block  0
call    0 returned 3001
branch  1 taken 3001 (fallthrough)
branch  2 taken 0 (throw)
        -:  312:    }
       1*:  313:    assert(!it.valid());
        1:  313-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  313-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  313-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  313-block  3
    %%%%%:  313-block  4
        -:  314:
        -:  315:
        1:  316:    int d = 100;
        -:  317:	//consider the interval [vMin-d, vMax+d]
     3202:  318:	for (int v = vMin-d; v <= vMax+d; v++){
        1:  318-block  0
     3201:  318-block  1
     3202:  318-block  2
branch  0 taken 3201
branch  1 taken 1 (fallthrough)
        -:  319:		//check that only values from the interval [vMin, vMax] are included in the list
    3201*:  320:		assert(list.search(v).valid() == (vMin <= v && v <= vMax));
     3201:  320-block  0
call    0 returned 3201
branch  1 taken 3201 (fallthrough)
branch  2 taken 0 (throw)
     3201:  320-block  1
call    3 returned 3201
branch  4 taken 3201 (fallthrough)
branch  5 taken 0 (throw)
     3201:  320-block  2
branch  6 taken 3101 (fallthrough)
branch  7 taken 100
     3101:  320-block  3
branch  8 taken 3001 (fallthrough)
branch  9 taken 100
     3001:  320-block  4
      200:  320-block  5
     3201:  320-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 3201
    %%%%%:  320-block  7
call   12 never executed
branch 13 never executed
branch 14 never executed
     3201:  320-block  8
    %%%%%:  320-block  9
    $$$$$:  320-block 10
        -:  321:    	 try{
     3201:  322:			 ListIterator li = list.search(v);
     3201:  322-block  0
call    0 returned 3201
branch  1 taken 3201 (fallthrough)
branch  2 taken 0 (throw)
    3201*:  323:    		 assert(list.remove(li));
     3201:  323-block  0
call    0 returned 3201
branch  1 taken 3001 (fallthrough)
branch  2 taken 200 (throw)
     3001:  323-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 3001
    %%%%%:  323-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
     3001:  323-block  3
    %%%%%:  323-block  4
    3001*:  324:    		 assert(vMin <= v && v <= vMax);
     3001:  324-block  0
branch  0 taken 3001 (fallthrough)
branch  1 taken 0
     3001:  324-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 3001
    %%%%%:  324-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
     3001:  324-block  3
    %%%%%:  324-block  4
      200:  325:    	 } catch (exception&) {
      200:  325-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 200
      200:  325-block  1
call    2 returned 200
      200:  326:			 assert(vMin > v || v > vMax);
branch  0 taken 100 (fallthrough)
branch  1 taken 100
      100:  326-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 100
    $$$$$:  326-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
      200:  326-block  2
    $$$$$:  326-block  3
      200:  327:		}
      200:  327-block  0
call    0 returned 200
    $$$$$:  327-block  1
call    1 never executed
        -:  328:    }
       1*:  329:    assert(list.size() == 0);
        1:  329-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  329-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  329-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  329-block  3
    %%%%%:  329-block  4
       1*:  330:    assert(list.isEmpty());
        1:  330-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  330-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  330-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  330-block  3
    %%%%%:  330-block  4
        1:  331:}
        1:  331-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  331-block  1
call    2 never executed
    $$$$$:  331-block  2
call    3 never executed
        -:  332:
function _Z16testJumpBackwardPFbiiE called 1 returned 100% blocks executed 78%
        1:  333:void testJumpBackward(Relation r)
        -:  334:{
        1:  335:    cout<<"Test Jump Backward"<<endl;
        1:  335-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  335-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  336:    SortedIteratedList list =SortedIteratedList(r);
        1:  336-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  337:    list.add(1);
        1:  337-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  338:    list.add(2);
        1:  338-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  339:    list.add(3);
        1:  339-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  340:    list.add(4);
        1:  340-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  341:    list.add(5);
        1:  341-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  342:    ListIterator it =list.search(5);
        1:  342-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  343:    it.jumpBackward(4);
        1:  343-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  344:    assert(it.getCurrent()==1);
        1:  344-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  344-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  344-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  344-block  3
    %%%%%:  344-block  4
        1:  345:    ListIterator it1=list.search(5);
        1:  345-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  346:    it1.jumpBackward(2);
        1:  346-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  347:    assert(it1.getCurrent()==3);
        1:  347-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  347-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  347-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
        1:  347-block  3
    %%%%%:  347-block  4
        -:  348:    try{
        1:  349:        it1.jumpBackward(5);
        1:  349-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
        1:  350:    }catch (exception&){
        1:  350-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  350-block  1
call    2 returned 1
        -:  351:        assert(true);
        1:  352:    }
call    0 returned 1
        -:  353:    try{
        1:  354:        it.jumpBackward(0);
        1:  354-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
        -:  355:    }
        1:  356:    catch (exception&)
        1:  356-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  356-block  1
call    2 returned 1
        -:  357:    {
        -:  358:        assert(true);
        1:  359:    }
call    0 returned 1
        -:  360:
        1:  361:}
        1:  361-block  0
call    0 returned 1
    $$$$$:  361-block  1
call    1 never executed
        -:  362:
function _Z15testAllExtendedv called 1 returned 100% blocks executed 100%
        1:  363:void testAllExtended() {
        1:  364:	testCreate();
        1:  364-block  0
call    0 returned 1
        1:  365:	testAddAndSearch();
call    0 returned 1
        1:  366:	testDeleteSearch();
call    0 returned 1
        1:  367:    testQuantity();
call    0 returned 1
        1:  368:    testJumpBackward(asc);
call    0 returned 1
        1:  369:}
        -:  370:
